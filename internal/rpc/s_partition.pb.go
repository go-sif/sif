// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.3
// source: s_partition.proto

package rpc

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type MAssignPartitionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Loader []byte `protobuf:"bytes,1,opt,name=loader,proto3" json:"loader,omitempty"`
}

func (x *MAssignPartitionRequest) Reset() {
	*x = MAssignPartitionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s_partition_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MAssignPartitionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MAssignPartitionRequest) ProtoMessage() {}

func (x *MAssignPartitionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_s_partition_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MAssignPartitionRequest.ProtoReflect.Descriptor instead.
func (*MAssignPartitionRequest) Descriptor() ([]byte, []int) {
	return file_s_partition_proto_rawDescGZIP(), []int{0}
}

func (x *MAssignPartitionRequest) GetLoader() []byte {
	if x != nil {
		return x.Loader
	}
	return nil
}

type MAssignPartitionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MAssignPartitionResponse) Reset() {
	*x = MAssignPartitionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s_partition_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MAssignPartitionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MAssignPartitionResponse) ProtoMessage() {}

func (x *MAssignPartitionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_s_partition_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MAssignPartitionResponse.ProtoReflect.Descriptor instead.
func (*MAssignPartitionResponse) Descriptor() ([]byte, []int) {
	return file_s_partition_proto_rawDescGZIP(), []int{1}
}

type MPartitionMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Bytes uint32 `protobuf:"varint,2,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (x *MPartitionMeta) Reset() {
	*x = MPartitionMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s_partition_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MPartitionMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MPartitionMeta) ProtoMessage() {}

func (x *MPartitionMeta) ProtoReflect() protoreflect.Message {
	mi := &file_s_partition_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MPartitionMeta.ProtoReflect.Descriptor instead.
func (*MPartitionMeta) Descriptor() ([]byte, []int) {
	return file_s_partition_proto_rawDescGZIP(), []int{2}
}

func (x *MPartitionMeta) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MPartitionMeta) GetBytes() uint32 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

type MShufflePartitionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bucket uint64 `protobuf:"varint,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
}

func (x *MShufflePartitionRequest) Reset() {
	*x = MShufflePartitionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s_partition_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MShufflePartitionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MShufflePartitionRequest) ProtoMessage() {}

func (x *MShufflePartitionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_s_partition_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MShufflePartitionRequest.ProtoReflect.Descriptor instead.
func (*MShufflePartitionRequest) Descriptor() ([]byte, []int) {
	return file_s_partition_proto_rawDescGZIP(), []int{3}
}

func (x *MShufflePartitionRequest) GetBucket() uint64 {
	if x != nil {
		return x.Bucket
	}
	return 0
}

type MShufflePartitionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ready   bool            `protobuf:"varint,1,opt,name=ready,proto3" json:"ready,omitempty"`
	HasNext bool            `protobuf:"varint,2,opt,name=hasNext,proto3" json:"hasNext,omitempty"`
	Part    *MPartitionMeta `protobuf:"bytes,3,opt,name=part,proto3" json:"part,omitempty"`
}

func (x *MShufflePartitionResponse) Reset() {
	*x = MShufflePartitionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s_partition_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MShufflePartitionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MShufflePartitionResponse) ProtoMessage() {}

func (x *MShufflePartitionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_s_partition_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MShufflePartitionResponse.ProtoReflect.Descriptor instead.
func (*MShufflePartitionResponse) Descriptor() ([]byte, []int) {
	return file_s_partition_proto_rawDescGZIP(), []int{4}
}

func (x *MShufflePartitionResponse) GetReady() bool {
	if x != nil {
		return x.Ready
	}
	return false
}

func (x *MShufflePartitionResponse) GetHasNext() bool {
	if x != nil {
		return x.HasNext
	}
	return false
}

func (x *MShufflePartitionResponse) GetPart() *MPartitionMeta {
	if x != nil {
		return x.Part
	}
	return nil
}

type MTransferPartitionDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *MTransferPartitionDataRequest) Reset() {
	*x = MTransferPartitionDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s_partition_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MTransferPartitionDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MTransferPartitionDataRequest) ProtoMessage() {}

func (x *MTransferPartitionDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_s_partition_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MTransferPartitionDataRequest.ProtoReflect.Descriptor instead.
func (*MTransferPartitionDataRequest) Descriptor() ([]byte, []int) {
	return file_s_partition_proto_rawDescGZIP(), []int{5}
}

func (x *MTransferPartitionDataRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type MPartitionChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data               []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	DataType           int32    `protobuf:"varint,2,opt,name=dataType,proto3" json:"dataType,omitempty"`
	KeyData            []uint64 `protobuf:"varint,3,rep,packed,name=keyData,proto3" json:"keyData,omitempty"`
	VarDataRowNum      int32    `protobuf:"varint,4,opt,name=varDataRowNum,proto3" json:"varDataRowNum,omitempty"`
	VarDataColName     string   `protobuf:"bytes,5,opt,name=varDataColName,proto3" json:"varDataColName,omitempty"`
	TotalSizeBytes     int32    `protobuf:"varint,6,opt,name=totalSizeBytes,proto3" json:"totalSizeBytes,omitempty"`
	RemainingSizeBytes int32    `protobuf:"varint,7,opt,name=remainingSizeBytes,proto3" json:"remainingSizeBytes,omitempty"`
	Append             int32    `protobuf:"varint,8,opt,name=append,proto3" json:"append,omitempty"`
}

func (x *MPartitionChunk) Reset() {
	*x = MPartitionChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s_partition_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MPartitionChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MPartitionChunk) ProtoMessage() {}

func (x *MPartitionChunk) ProtoReflect() protoreflect.Message {
	mi := &file_s_partition_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MPartitionChunk.ProtoReflect.Descriptor instead.
func (*MPartitionChunk) Descriptor() ([]byte, []int) {
	return file_s_partition_proto_rawDescGZIP(), []int{6}
}

func (x *MPartitionChunk) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *MPartitionChunk) GetDataType() int32 {
	if x != nil {
		return x.DataType
	}
	return 0
}

func (x *MPartitionChunk) GetKeyData() []uint64 {
	if x != nil {
		return x.KeyData
	}
	return nil
}

func (x *MPartitionChunk) GetVarDataRowNum() int32 {
	if x != nil {
		return x.VarDataRowNum
	}
	return 0
}

func (x *MPartitionChunk) GetVarDataColName() string {
	if x != nil {
		return x.VarDataColName
	}
	return ""
}

func (x *MPartitionChunk) GetTotalSizeBytes() int32 {
	if x != nil {
		return x.TotalSizeBytes
	}
	return 0
}

func (x *MPartitionChunk) GetRemainingSizeBytes() int32 {
	if x != nil {
		return x.RemainingSizeBytes
	}
	return 0
}

func (x *MPartitionChunk) GetAppend() int32 {
	if x != nil {
		return x.Append
	}
	return 0
}

type MShuffleAccumulatorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MShuffleAccumulatorRequest) Reset() {
	*x = MShuffleAccumulatorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s_partition_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MShuffleAccumulatorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MShuffleAccumulatorRequest) ProtoMessage() {}

func (x *MShuffleAccumulatorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_s_partition_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MShuffleAccumulatorRequest.ProtoReflect.Descriptor instead.
func (*MShuffleAccumulatorRequest) Descriptor() ([]byte, []int) {
	return file_s_partition_proto_rawDescGZIP(), []int{7}
}

type MShuffleAccumulatorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ready          bool  `protobuf:"varint,1,opt,name=ready,proto3" json:"ready,omitempty"`
	TotalSizeBytes int32 `protobuf:"varint,2,opt,name=totalSizeBytes,proto3" json:"totalSizeBytes,omitempty"`
}

func (x *MShuffleAccumulatorResponse) Reset() {
	*x = MShuffleAccumulatorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s_partition_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MShuffleAccumulatorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MShuffleAccumulatorResponse) ProtoMessage() {}

func (x *MShuffleAccumulatorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_s_partition_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MShuffleAccumulatorResponse.ProtoReflect.Descriptor instead.
func (*MShuffleAccumulatorResponse) Descriptor() ([]byte, []int) {
	return file_s_partition_proto_rawDescGZIP(), []int{8}
}

func (x *MShuffleAccumulatorResponse) GetReady() bool {
	if x != nil {
		return x.Ready
	}
	return false
}

func (x *MShuffleAccumulatorResponse) GetTotalSizeBytes() int32 {
	if x != nil {
		return x.TotalSizeBytes
	}
	return 0
}

type MTransferAccumulatorDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MTransferAccumulatorDataRequest) Reset() {
	*x = MTransferAccumulatorDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s_partition_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MTransferAccumulatorDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MTransferAccumulatorDataRequest) ProtoMessage() {}

func (x *MTransferAccumulatorDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_s_partition_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MTransferAccumulatorDataRequest.ProtoReflect.Descriptor instead.
func (*MTransferAccumulatorDataRequest) Descriptor() ([]byte, []int) {
	return file_s_partition_proto_rawDescGZIP(), []int{9}
}

type MAccumulatorChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *MAccumulatorChunk) Reset() {
	*x = MAccumulatorChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s_partition_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MAccumulatorChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MAccumulatorChunk) ProtoMessage() {}

func (x *MAccumulatorChunk) ProtoReflect() protoreflect.Message {
	mi := &file_s_partition_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MAccumulatorChunk.ProtoReflect.Descriptor instead.
func (*MAccumulatorChunk) Descriptor() ([]byte, []int) {
	return file_s_partition_proto_rawDescGZIP(), []int{10}
}

func (x *MAccumulatorChunk) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// Intended for disk serialization, not transmission
type DPartition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string                         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	NumRows              uint32                         `protobuf:"varint,2,opt,name=numRows,proto3" json:"numRows,omitempty"`
	MaxRows              uint32                         `protobuf:"varint,3,opt,name=maxRows,proto3" json:"maxRows,omitempty"`
	Capacity             uint32                         `protobuf:"varint,4,opt,name=capacity,proto3" json:"capacity,omitempty"`
	IsKeyed              bool                           `protobuf:"varint,5,opt,name=isKeyed,proto3" json:"isKeyed,omitempty"`
	RowData              []byte                         `protobuf:"bytes,6,opt,name=rowData,proto3" json:"rowData,omitempty"`
	RowMeta              []byte                         `protobuf:"bytes,7,opt,name=rowMeta,proto3" json:"rowMeta,omitempty"`
	Keys                 []uint64                       `protobuf:"varint,8,rep,packed,name=keys,proto3" json:"keys,omitempty"`
	SerializedVarRowData map[string]*DPartition_DVarCol `protobuf:"bytes,9,rep,name=serializedVarRowData,proto3" json:"serializedVarRowData,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DPartition) Reset() {
	*x = DPartition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s_partition_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DPartition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DPartition) ProtoMessage() {}

func (x *DPartition) ProtoReflect() protoreflect.Message {
	mi := &file_s_partition_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DPartition.ProtoReflect.Descriptor instead.
func (*DPartition) Descriptor() ([]byte, []int) {
	return file_s_partition_proto_rawDescGZIP(), []int{11}
}

func (x *DPartition) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DPartition) GetNumRows() uint32 {
	if x != nil {
		return x.NumRows
	}
	return 0
}

func (x *DPartition) GetMaxRows() uint32 {
	if x != nil {
		return x.MaxRows
	}
	return 0
}

func (x *DPartition) GetCapacity() uint32 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *DPartition) GetIsKeyed() bool {
	if x != nil {
		return x.IsKeyed
	}
	return false
}

func (x *DPartition) GetRowData() []byte {
	if x != nil {
		return x.RowData
	}
	return nil
}

func (x *DPartition) GetRowMeta() []byte {
	if x != nil {
		return x.RowMeta
	}
	return nil
}

func (x *DPartition) GetKeys() []uint64 {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *DPartition) GetSerializedVarRowData() map[string]*DPartition_DVarCol {
	if x != nil {
		return x.SerializedVarRowData
	}
	return nil
}

type DPartition_DVarCol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RowData map[uint32][]byte `protobuf:"bytes,1,rep,name=rowData,proto3" json:"rowData,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DPartition_DVarCol) Reset() {
	*x = DPartition_DVarCol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s_partition_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DPartition_DVarCol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DPartition_DVarCol) ProtoMessage() {}

func (x *DPartition_DVarCol) ProtoReflect() protoreflect.Message {
	mi := &file_s_partition_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DPartition_DVarCol.ProtoReflect.Descriptor instead.
func (*DPartition_DVarCol) Descriptor() ([]byte, []int) {
	return file_s_partition_proto_rawDescGZIP(), []int{11, 0}
}

func (x *DPartition_DVarCol) GetRowData() map[uint32][]byte {
	if x != nil {
		return x.RowData
	}
	return nil
}

var File_s_partition_proto protoreflect.FileDescriptor

var file_s_partition_proto_rawDesc = []byte{
	0x0a, 0x11, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x03, 0x72, 0x70, 0x63, 0x22, 0x31, 0x0a, 0x17, 0x4d, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x22, 0x1a, 0x0a, 0x18, 0x4d,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x0a, 0x0e, 0x4d, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x22,
	0x32, 0x0a, 0x18, 0x4d, 0x53, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x22, 0x74, 0x0a, 0x19, 0x4d, 0x53, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x4e, 0x65, 0x78,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4e, 0x65, 0x78, 0x74,
	0x12, 0x27, 0x0a, 0x04, 0x70, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x04, 0x70, 0x61, 0x72, 0x74, 0x22, 0x2f, 0x0a, 0x1d, 0x4d, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x9d, 0x02, 0x0a, 0x0f, 0x4d,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c,
	0x0a, 0x07, 0x6b, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x42,
	0x02, 0x10, 0x01, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d,
	0x76, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x6f, 0x77, 0x4e, 0x75, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x76, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x6f, 0x77, 0x4e,
	0x75, 0x6d, 0x12, 0x26, 0x0a, 0x0e, 0x76, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x61, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x53,
	0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12,
	0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x22, 0x1c, 0x0a, 0x1a, 0x4d, 0x53,
	0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5b, 0x0a, 0x1b, 0x4d, 0x53, 0x68, 0x75,
	0x66, 0x66, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x12, 0x26, 0x0a,
	0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x21, 0x0a, 0x1f, 0x4d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x27, 0x0a, 0x11, 0x4d, 0x41, 0x63, 0x63,
	0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x9b, 0x04, 0x0a, 0x0a, 0x44, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x6e, 0x75, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61,
	0x78, 0x52, 0x6f, 0x77, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x61, 0x78,
	0x52, 0x6f, 0x77, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x4b, 0x65, 0x79, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x69, 0x73, 0x4b, 0x65, 0x79, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f,
	0x77, 0x44, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x72, 0x6f, 0x77,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x61, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x72, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x16,
	0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x04, 0x42, 0x02, 0x10, 0x01,
	0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x5d, 0x0a, 0x14, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x56, 0x61, 0x72, 0x52, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x56, 0x61, 0x72, 0x52, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x14, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x56, 0x61, 0x72, 0x52, 0x6f,
	0x77, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x85, 0x01, 0x0a, 0x07, 0x44, 0x56, 0x61, 0x72, 0x43, 0x6f,
	0x6c, 0x12, 0x3e, 0x0a, 0x07, 0x72, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x56, 0x61, 0x72, 0x43, 0x6f, 0x6c, 0x2e, 0x52, 0x6f, 0x77, 0x44,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x72, 0x6f, 0x77, 0x44, 0x61, 0x74,
	0x61, 0x1a, 0x3a, 0x0a, 0x0c, 0x52, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x60, 0x0a,
	0x19, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x56, 0x61, 0x72, 0x52, 0x6f,
	0x77, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x44, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x56, 0x61,
	0x72, 0x43, 0x6f, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32,
	0xc9, 0x03, 0x0a, 0x11, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x0f, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x10, 0x53, 0x68, 0x75, 0x66, 0x66,
	0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x4d, 0x53, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x4d, 0x53, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x12,
	0x53, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x1f, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x53, 0x68, 0x75, 0x66, 0x66, 0x6c,
	0x65, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x53, 0x68, 0x75, 0x66, 0x66,
	0x6c, 0x65, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x22, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0x00, 0x30, 0x01, 0x12, 0x5b,
	0x0a, 0x17, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75,
	0x6c, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x4d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c,
	0x61, 0x74, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74,
	0x6f, 0x72, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0x00, 0x30, 0x01, 0x42, 0x24, 0x5a, 0x22, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2d, 0x73, 0x69, 0x66,
	0x2f, 0x73, 0x69, 0x66, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x72, 0x70,
	0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_s_partition_proto_rawDescOnce sync.Once
	file_s_partition_proto_rawDescData = file_s_partition_proto_rawDesc
)

func file_s_partition_proto_rawDescGZIP() []byte {
	file_s_partition_proto_rawDescOnce.Do(func() {
		file_s_partition_proto_rawDescData = protoimpl.X.CompressGZIP(file_s_partition_proto_rawDescData)
	})
	return file_s_partition_proto_rawDescData
}

var file_s_partition_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_s_partition_proto_goTypes = []interface{}{
	(*MAssignPartitionRequest)(nil),         // 0: rpc.MAssignPartitionRequest
	(*MAssignPartitionResponse)(nil),        // 1: rpc.MAssignPartitionResponse
	(*MPartitionMeta)(nil),                  // 2: rpc.MPartitionMeta
	(*MShufflePartitionRequest)(nil),        // 3: rpc.MShufflePartitionRequest
	(*MShufflePartitionResponse)(nil),       // 4: rpc.MShufflePartitionResponse
	(*MTransferPartitionDataRequest)(nil),   // 5: rpc.MTransferPartitionDataRequest
	(*MPartitionChunk)(nil),                 // 6: rpc.MPartitionChunk
	(*MShuffleAccumulatorRequest)(nil),      // 7: rpc.MShuffleAccumulatorRequest
	(*MShuffleAccumulatorResponse)(nil),     // 8: rpc.MShuffleAccumulatorResponse
	(*MTransferAccumulatorDataRequest)(nil), // 9: rpc.MTransferAccumulatorDataRequest
	(*MAccumulatorChunk)(nil),               // 10: rpc.MAccumulatorChunk
	(*DPartition)(nil),                      // 11: rpc.DPartition
	(*DPartition_DVarCol)(nil),              // 12: rpc.DPartition.DVarCol
	nil,                                     // 13: rpc.DPartition.SerializedVarRowDataEntry
	nil,                                     // 14: rpc.DPartition.DVarCol.RowDataEntry
}
var file_s_partition_proto_depIdxs = []int32{
	2,  // 0: rpc.MShufflePartitionResponse.part:type_name -> rpc.MPartitionMeta
	13, // 1: rpc.DPartition.serializedVarRowData:type_name -> rpc.DPartition.SerializedVarRowDataEntry
	14, // 2: rpc.DPartition.DVarCol.rowData:type_name -> rpc.DPartition.DVarCol.RowDataEntry
	12, // 3: rpc.DPartition.SerializedVarRowDataEntry.value:type_name -> rpc.DPartition.DVarCol
	0,  // 4: rpc.PartitionsService.AssignPartition:input_type -> rpc.MAssignPartitionRequest
	3,  // 5: rpc.PartitionsService.ShufflePartition:input_type -> rpc.MShufflePartitionRequest
	7,  // 6: rpc.PartitionsService.ShuffleAccumulator:input_type -> rpc.MShuffleAccumulatorRequest
	5,  // 7: rpc.PartitionsService.TransferPartitionData:input_type -> rpc.MTransferPartitionDataRequest
	9,  // 8: rpc.PartitionsService.TransferAccumulatorData:input_type -> rpc.MTransferAccumulatorDataRequest
	1,  // 9: rpc.PartitionsService.AssignPartition:output_type -> rpc.MAssignPartitionResponse
	4,  // 10: rpc.PartitionsService.ShufflePartition:output_type -> rpc.MShufflePartitionResponse
	8,  // 11: rpc.PartitionsService.ShuffleAccumulator:output_type -> rpc.MShuffleAccumulatorResponse
	6,  // 12: rpc.PartitionsService.TransferPartitionData:output_type -> rpc.MPartitionChunk
	10, // 13: rpc.PartitionsService.TransferAccumulatorData:output_type -> rpc.MAccumulatorChunk
	9,  // [9:14] is the sub-list for method output_type
	4,  // [4:9] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_s_partition_proto_init() }
func file_s_partition_proto_init() {
	if File_s_partition_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_s_partition_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MAssignPartitionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s_partition_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MAssignPartitionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s_partition_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MPartitionMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s_partition_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MShufflePartitionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s_partition_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MShufflePartitionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s_partition_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MTransferPartitionDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s_partition_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MPartitionChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s_partition_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MShuffleAccumulatorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s_partition_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MShuffleAccumulatorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s_partition_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MTransferAccumulatorDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s_partition_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MAccumulatorChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s_partition_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DPartition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s_partition_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DPartition_DVarCol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_s_partition_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_s_partition_proto_goTypes,
		DependencyIndexes: file_s_partition_proto_depIdxs,
		MessageInfos:      file_s_partition_proto_msgTypes,
	}.Build()
	File_s_partition_proto = out.File
	file_s_partition_proto_rawDesc = nil
	file_s_partition_proto_goTypes = nil
	file_s_partition_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PartitionsServiceClient is the client API for PartitionsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PartitionsServiceClient interface {
	AssignPartition(ctx context.Context, in *MAssignPartitionRequest, opts ...grpc.CallOption) (*MAssignPartitionResponse, error)
	ShufflePartition(ctx context.Context, in *MShufflePartitionRequest, opts ...grpc.CallOption) (*MShufflePartitionResponse, error)
	ShuffleAccumulator(ctx context.Context, in *MShuffleAccumulatorRequest, opts ...grpc.CallOption) (*MShuffleAccumulatorResponse, error)
	TransferPartitionData(ctx context.Context, in *MTransferPartitionDataRequest, opts ...grpc.CallOption) (PartitionsService_TransferPartitionDataClient, error)
	TransferAccumulatorData(ctx context.Context, in *MTransferAccumulatorDataRequest, opts ...grpc.CallOption) (PartitionsService_TransferAccumulatorDataClient, error)
}

type partitionsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPartitionsServiceClient(cc grpc.ClientConnInterface) PartitionsServiceClient {
	return &partitionsServiceClient{cc}
}

func (c *partitionsServiceClient) AssignPartition(ctx context.Context, in *MAssignPartitionRequest, opts ...grpc.CallOption) (*MAssignPartitionResponse, error) {
	out := new(MAssignPartitionResponse)
	err := c.cc.Invoke(ctx, "/rpc.PartitionsService/AssignPartition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionsServiceClient) ShufflePartition(ctx context.Context, in *MShufflePartitionRequest, opts ...grpc.CallOption) (*MShufflePartitionResponse, error) {
	out := new(MShufflePartitionResponse)
	err := c.cc.Invoke(ctx, "/rpc.PartitionsService/ShufflePartition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionsServiceClient) ShuffleAccumulator(ctx context.Context, in *MShuffleAccumulatorRequest, opts ...grpc.CallOption) (*MShuffleAccumulatorResponse, error) {
	out := new(MShuffleAccumulatorResponse)
	err := c.cc.Invoke(ctx, "/rpc.PartitionsService/ShuffleAccumulator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionsServiceClient) TransferPartitionData(ctx context.Context, in *MTransferPartitionDataRequest, opts ...grpc.CallOption) (PartitionsService_TransferPartitionDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PartitionsService_serviceDesc.Streams[0], "/rpc.PartitionsService/TransferPartitionData", opts...)
	if err != nil {
		return nil, err
	}
	x := &partitionsServiceTransferPartitionDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PartitionsService_TransferPartitionDataClient interface {
	Recv() (*MPartitionChunk, error)
	grpc.ClientStream
}

type partitionsServiceTransferPartitionDataClient struct {
	grpc.ClientStream
}

func (x *partitionsServiceTransferPartitionDataClient) Recv() (*MPartitionChunk, error) {
	m := new(MPartitionChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *partitionsServiceClient) TransferAccumulatorData(ctx context.Context, in *MTransferAccumulatorDataRequest, opts ...grpc.CallOption) (PartitionsService_TransferAccumulatorDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PartitionsService_serviceDesc.Streams[1], "/rpc.PartitionsService/TransferAccumulatorData", opts...)
	if err != nil {
		return nil, err
	}
	x := &partitionsServiceTransferAccumulatorDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PartitionsService_TransferAccumulatorDataClient interface {
	Recv() (*MAccumulatorChunk, error)
	grpc.ClientStream
}

type partitionsServiceTransferAccumulatorDataClient struct {
	grpc.ClientStream
}

func (x *partitionsServiceTransferAccumulatorDataClient) Recv() (*MAccumulatorChunk, error) {
	m := new(MAccumulatorChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PartitionsServiceServer is the server API for PartitionsService service.
type PartitionsServiceServer interface {
	AssignPartition(context.Context, *MAssignPartitionRequest) (*MAssignPartitionResponse, error)
	ShufflePartition(context.Context, *MShufflePartitionRequest) (*MShufflePartitionResponse, error)
	ShuffleAccumulator(context.Context, *MShuffleAccumulatorRequest) (*MShuffleAccumulatorResponse, error)
	TransferPartitionData(*MTransferPartitionDataRequest, PartitionsService_TransferPartitionDataServer) error
	TransferAccumulatorData(*MTransferAccumulatorDataRequest, PartitionsService_TransferAccumulatorDataServer) error
}

// UnimplementedPartitionsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPartitionsServiceServer struct {
}

func (*UnimplementedPartitionsServiceServer) AssignPartition(context.Context, *MAssignPartitionRequest) (*MAssignPartitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignPartition not implemented")
}
func (*UnimplementedPartitionsServiceServer) ShufflePartition(context.Context, *MShufflePartitionRequest) (*MShufflePartitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShufflePartition not implemented")
}
func (*UnimplementedPartitionsServiceServer) ShuffleAccumulator(context.Context, *MShuffleAccumulatorRequest) (*MShuffleAccumulatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShuffleAccumulator not implemented")
}
func (*UnimplementedPartitionsServiceServer) TransferPartitionData(*MTransferPartitionDataRequest, PartitionsService_TransferPartitionDataServer) error {
	return status.Errorf(codes.Unimplemented, "method TransferPartitionData not implemented")
}
func (*UnimplementedPartitionsServiceServer) TransferAccumulatorData(*MTransferAccumulatorDataRequest, PartitionsService_TransferAccumulatorDataServer) error {
	return status.Errorf(codes.Unimplemented, "method TransferAccumulatorData not implemented")
}

func RegisterPartitionsServiceServer(s *grpc.Server, srv PartitionsServiceServer) {
	s.RegisterService(&_PartitionsService_serviceDesc, srv)
}

func _PartitionsService_AssignPartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MAssignPartitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionsServiceServer).AssignPartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.PartitionsService/AssignPartition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionsServiceServer).AssignPartition(ctx, req.(*MAssignPartitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionsService_ShufflePartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MShufflePartitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionsServiceServer).ShufflePartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.PartitionsService/ShufflePartition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionsServiceServer).ShufflePartition(ctx, req.(*MShufflePartitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionsService_ShuffleAccumulator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MShuffleAccumulatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionsServiceServer).ShuffleAccumulator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.PartitionsService/ShuffleAccumulator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionsServiceServer).ShuffleAccumulator(ctx, req.(*MShuffleAccumulatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionsService_TransferPartitionData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MTransferPartitionDataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PartitionsServiceServer).TransferPartitionData(m, &partitionsServiceTransferPartitionDataServer{stream})
}

type PartitionsService_TransferPartitionDataServer interface {
	Send(*MPartitionChunk) error
	grpc.ServerStream
}

type partitionsServiceTransferPartitionDataServer struct {
	grpc.ServerStream
}

func (x *partitionsServiceTransferPartitionDataServer) Send(m *MPartitionChunk) error {
	return x.ServerStream.SendMsg(m)
}

func _PartitionsService_TransferAccumulatorData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MTransferAccumulatorDataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PartitionsServiceServer).TransferAccumulatorData(m, &partitionsServiceTransferAccumulatorDataServer{stream})
}

type PartitionsService_TransferAccumulatorDataServer interface {
	Send(*MAccumulatorChunk) error
	grpc.ServerStream
}

type partitionsServiceTransferAccumulatorDataServer struct {
	grpc.ServerStream
}

func (x *partitionsServiceTransferAccumulatorDataServer) Send(m *MAccumulatorChunk) error {
	return x.ServerStream.SendMsg(m)
}

var _PartitionsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.PartitionsService",
	HandlerType: (*PartitionsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AssignPartition",
			Handler:    _PartitionsService_AssignPartition_Handler,
		},
		{
			MethodName: "ShufflePartition",
			Handler:    _PartitionsService_ShufflePartition_Handler,
		},
		{
			MethodName: "ShuffleAccumulator",
			Handler:    _PartitionsService_ShuffleAccumulator_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TransferPartitionData",
			Handler:       _PartitionsService_TransferPartitionData_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TransferAccumulatorData",
			Handler:       _PartitionsService_TransferAccumulatorData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "s_partition.proto",
}
