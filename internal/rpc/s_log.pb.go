// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.3
// source: s_log.proto

package rpc

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type MLogMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level   int32  `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Source  string `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *MLogMsg) Reset() {
	*x = MLogMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s_log_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MLogMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MLogMsg) ProtoMessage() {}

func (x *MLogMsg) ProtoReflect() protoreflect.Message {
	mi := &file_s_log_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MLogMsg.ProtoReflect.Descriptor instead.
func (*MLogMsg) Descriptor() ([]byte, []int) {
	return file_s_log_proto_rawDescGZIP(), []int{0}
}

func (x *MLogMsg) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *MLogMsg) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *MLogMsg) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type MLogMsgAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time  int64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Count int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *MLogMsgAck) Reset() {
	*x = MLogMsgAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s_log_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MLogMsgAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MLogMsgAck) ProtoMessage() {}

func (x *MLogMsgAck) ProtoReflect() protoreflect.Message {
	mi := &file_s_log_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MLogMsgAck.ProtoReflect.Descriptor instead.
func (*MLogMsgAck) Descriptor() ([]byte, []int) {
	return file_s_log_proto_rawDescGZIP(), []int{1}
}

func (x *MLogMsgAck) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *MLogMsgAck) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

var File_s_log_proto protoreflect.FileDescriptor

var file_s_log_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x72,
	0x70, 0x63, 0x22, 0x51, 0x0a, 0x07, 0x4d, 0x4c, 0x6f, 0x67, 0x4d, 0x73, 0x67, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x36, 0x0a, 0x0a, 0x4d, 0x4c, 0x6f, 0x67, 0x4d, 0x73, 0x67,
	0x41, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x36, 0x0a,
	0x0a, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x03, 0x4c,
	0x6f, 0x67, 0x12, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x4c, 0x6f, 0x67, 0x4d, 0x73, 0x67,
	0x1a, 0x0f, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x4c, 0x6f, 0x67, 0x4d, 0x73, 0x67, 0x41, 0x63,
	0x6b, 0x22, 0x00, 0x28, 0x01, 0x42, 0x24, 0x5a, 0x22, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2d, 0x73, 0x69, 0x66, 0x2f, 0x73, 0x69, 0x66, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_s_log_proto_rawDescOnce sync.Once
	file_s_log_proto_rawDescData = file_s_log_proto_rawDesc
)

func file_s_log_proto_rawDescGZIP() []byte {
	file_s_log_proto_rawDescOnce.Do(func() {
		file_s_log_proto_rawDescData = protoimpl.X.CompressGZIP(file_s_log_proto_rawDescData)
	})
	return file_s_log_proto_rawDescData
}

var file_s_log_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_s_log_proto_goTypes = []interface{}{
	(*MLogMsg)(nil),    // 0: rpc.MLogMsg
	(*MLogMsgAck)(nil), // 1: rpc.MLogMsgAck
}
var file_s_log_proto_depIdxs = []int32{
	0, // 0: rpc.LogService.Log:input_type -> rpc.MLogMsg
	1, // 1: rpc.LogService.Log:output_type -> rpc.MLogMsgAck
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_s_log_proto_init() }
func file_s_log_proto_init() {
	if File_s_log_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_s_log_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MLogMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s_log_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MLogMsgAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_s_log_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_s_log_proto_goTypes,
		DependencyIndexes: file_s_log_proto_depIdxs,
		MessageInfos:      file_s_log_proto_msgTypes,
	}.Build()
	File_s_log_proto = out.File
	file_s_log_proto_rawDesc = nil
	file_s_log_proto_goTypes = nil
	file_s_log_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LogServiceClient is the client API for LogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LogServiceClient interface {
	Log(ctx context.Context, opts ...grpc.CallOption) (LogService_LogClient, error)
}

type logServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogServiceClient(cc grpc.ClientConnInterface) LogServiceClient {
	return &logServiceClient{cc}
}

func (c *logServiceClient) Log(ctx context.Context, opts ...grpc.CallOption) (LogService_LogClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LogService_serviceDesc.Streams[0], "/rpc.LogService/Log", opts...)
	if err != nil {
		return nil, err
	}
	x := &logServiceLogClient{stream}
	return x, nil
}

type LogService_LogClient interface {
	Send(*MLogMsg) error
	CloseAndRecv() (*MLogMsgAck, error)
	grpc.ClientStream
}

type logServiceLogClient struct {
	grpc.ClientStream
}

func (x *logServiceLogClient) Send(m *MLogMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *logServiceLogClient) CloseAndRecv() (*MLogMsgAck, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(MLogMsgAck)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LogServiceServer is the server API for LogService service.
type LogServiceServer interface {
	Log(LogService_LogServer) error
}

// UnimplementedLogServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLogServiceServer struct {
}

func (*UnimplementedLogServiceServer) Log(LogService_LogServer) error {
	return status.Errorf(codes.Unimplemented, "method Log not implemented")
}

func RegisterLogServiceServer(s *grpc.Server, srv LogServiceServer) {
	s.RegisterService(&_LogService_serviceDesc, srv)
}

func _LogService_Log_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LogServiceServer).Log(&logServiceLogServer{stream})
}

type LogService_LogServer interface {
	SendAndClose(*MLogMsgAck) error
	Recv() (*MLogMsg, error)
	grpc.ServerStream
}

type logServiceLogServer struct {
	grpc.ServerStream
}

func (x *logServiceLogServer) SendAndClose(m *MLogMsgAck) error {
	return x.ServerStream.SendMsg(m)
}

func (x *logServiceLogServer) Recv() (*MLogMsg, error) {
	m := new(MLogMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _LogService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.LogService",
	HandlerType: (*LogServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Log",
			Handler:       _LogService_Log_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "s_log.proto",
}
