// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.3
// source: s_stats.proto

package stats

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type MStatisticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MStatisticsRequest) Reset() {
	*x = MStatisticsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s_stats_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MStatisticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MStatisticsRequest) ProtoMessage() {}

func (x *MStatisticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_s_stats_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MStatisticsRequest.ProtoReflect.Descriptor instead.
func (*MStatisticsRequest) Descriptor() ([]byte, []int) {
	return file_s_stats_proto_rawDescGZIP(), []int{0}
}

type MStatisticsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Started                     bool    `protobuf:"varint,1,opt,name=started,proto3" json:"started,omitempty"`
	Finished                    bool    `protobuf:"varint,2,opt,name=finished,proto3" json:"finished,omitempty"`
	StartTime                   int64   `protobuf:"varint,3,opt,name=startTime,proto3" json:"startTime,omitempty"`
	TotalRuntime                int64   `protobuf:"varint,4,opt,name=totalRuntime,proto3" json:"totalRuntime,omitempty"`
	RowsProcessed               []int64 `protobuf:"varint,5,rep,packed,name=rowsProcessed,proto3" json:"rowsProcessed,omitempty"`
	PartitionsProcessed         []int64 `protobuf:"varint,6,rep,packed,name=partitionsProcessed,proto3" json:"partitionsProcessed,omitempty"`
	RecentPartitionRuntimes     []int64 `protobuf:"varint,7,rep,packed,name=recentPartitionRuntimes,proto3" json:"recentPartitionRuntimes,omitempty"`
	RecentPartitionRuntimesHead int32   `protobuf:"varint,8,opt,name=recentPartitionRuntimesHead,proto3" json:"recentPartitionRuntimesHead,omitempty"`
	StageRuntimes               []int64 `protobuf:"varint,9,rep,packed,name=stageRuntimes,proto3" json:"stageRuntimes,omitempty"`
	TransformPhaseRuntimes      []int64 `protobuf:"varint,10,rep,packed,name=transformPhaseRuntimes,proto3" json:"transformPhaseRuntimes,omitempty"`
	ShufflePhaseRuntimes        []int64 `protobuf:"varint,11,rep,packed,name=shufflePhaseRuntimes,proto3" json:"shufflePhaseRuntimes,omitempty"`
}

func (x *MStatisticsResponse) Reset() {
	*x = MStatisticsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s_stats_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MStatisticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MStatisticsResponse) ProtoMessage() {}

func (x *MStatisticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_s_stats_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MStatisticsResponse.ProtoReflect.Descriptor instead.
func (*MStatisticsResponse) Descriptor() ([]byte, []int) {
	return file_s_stats_proto_rawDescGZIP(), []int{1}
}

func (x *MStatisticsResponse) GetStarted() bool {
	if x != nil {
		return x.Started
	}
	return false
}

func (x *MStatisticsResponse) GetFinished() bool {
	if x != nil {
		return x.Finished
	}
	return false
}

func (x *MStatisticsResponse) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *MStatisticsResponse) GetTotalRuntime() int64 {
	if x != nil {
		return x.TotalRuntime
	}
	return 0
}

func (x *MStatisticsResponse) GetRowsProcessed() []int64 {
	if x != nil {
		return x.RowsProcessed
	}
	return nil
}

func (x *MStatisticsResponse) GetPartitionsProcessed() []int64 {
	if x != nil {
		return x.PartitionsProcessed
	}
	return nil
}

func (x *MStatisticsResponse) GetRecentPartitionRuntimes() []int64 {
	if x != nil {
		return x.RecentPartitionRuntimes
	}
	return nil
}

func (x *MStatisticsResponse) GetRecentPartitionRuntimesHead() int32 {
	if x != nil {
		return x.RecentPartitionRuntimesHead
	}
	return 0
}

func (x *MStatisticsResponse) GetStageRuntimes() []int64 {
	if x != nil {
		return x.StageRuntimes
	}
	return nil
}

func (x *MStatisticsResponse) GetTransformPhaseRuntimes() []int64 {
	if x != nil {
		return x.TransformPhaseRuntimes
	}
	return nil
}

func (x *MStatisticsResponse) GetShufflePhaseRuntimes() []int64 {
	if x != nil {
		return x.ShufflePhaseRuntimes
	}
	return nil
}

type MClusterStatisticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MClusterStatisticsRequest) Reset() {
	*x = MClusterStatisticsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s_stats_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MClusterStatisticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MClusterStatisticsRequest) ProtoMessage() {}

func (x *MClusterStatisticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_s_stats_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MClusterStatisticsRequest.ProtoReflect.Descriptor instead.
func (*MClusterStatisticsRequest) Descriptor() ([]byte, []int) {
	return file_s_stats_proto_rawDescGZIP(), []int{2}
}

type MClusterStatisticsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterStats map[string]*MStatisticsResponse `protobuf:"bytes,1,rep,name=clusterStats,proto3" json:"clusterStats,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MClusterStatisticsResponse) Reset() {
	*x = MClusterStatisticsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s_stats_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MClusterStatisticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MClusterStatisticsResponse) ProtoMessage() {}

func (x *MClusterStatisticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_s_stats_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MClusterStatisticsResponse.ProtoReflect.Descriptor instead.
func (*MClusterStatisticsResponse) Descriptor() ([]byte, []int) {
	return file_s_stats_proto_rawDescGZIP(), []int{3}
}

func (x *MClusterStatisticsResponse) GetClusterStats() map[string]*MStatisticsResponse {
	if x != nil {
		return x.ClusterStats
	}
	return nil
}

var File_s_stats_proto protoreflect.FileDescriptor

var file_s_stats_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x22, 0x14, 0x0a, 0x12, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xf3, 0x03, 0x0a,
	0x13, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x72, 0x6f, 0x77, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x0d, 0x72, 0x6f, 0x77, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x13, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x03, 0x52, 0x17, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x40,
	0x0a, 0x1b, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x48, 0x65, 0x61, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x1b, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x48, 0x65, 0x61, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x67, 0x65, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x67, 0x65, 0x52, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x03, 0x52, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x32,
	0x0a, 0x14, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x03, 0x52, 0x14, 0x73, 0x68,
	0x75, 0x66, 0x66, 0x6c, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x22, 0x1b, 0x0a, 0x19, 0x4d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0xd2, 0x01, 0x0a, 0x1a, 0x4d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57,
	0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x4d, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x1a, 0x5b, 0x0a, 0x11, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x32, 0x62, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x74, 0x73, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x11, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12,
	0x19, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x2e, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x70, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5a,
	0x0a, 0x11, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x12, 0x20, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x4d, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x4d, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x1d, 0x5a, 0x1b, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2d, 0x73, 0x69, 0x66, 0x2f,
	0x73, 0x69, 0x66, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_s_stats_proto_rawDescOnce sync.Once
	file_s_stats_proto_rawDescData = file_s_stats_proto_rawDesc
)

func file_s_stats_proto_rawDescGZIP() []byte {
	file_s_stats_proto_rawDescOnce.Do(func() {
		file_s_stats_proto_rawDescData = protoimpl.X.CompressGZIP(file_s_stats_proto_rawDescData)
	})
	return file_s_stats_proto_rawDescData
}

var file_s_stats_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_s_stats_proto_goTypes = []interface{}{
	(*MStatisticsRequest)(nil),         // 0: stats.MStatisticsRequest
	(*MStatisticsResponse)(nil),        // 1: stats.MStatisticsResponse
	(*MClusterStatisticsRequest)(nil),  // 2: stats.MClusterStatisticsRequest
	(*MClusterStatisticsResponse)(nil), // 3: stats.MClusterStatisticsResponse
	nil,                                // 4: stats.MClusterStatisticsResponse.ClusterStatsEntry
}
var file_s_stats_proto_depIdxs = []int32{
	4, // 0: stats.MClusterStatisticsResponse.clusterStats:type_name -> stats.MClusterStatisticsResponse.ClusterStatsEntry
	1, // 1: stats.MClusterStatisticsResponse.ClusterStatsEntry.value:type_name -> stats.MStatisticsResponse
	0, // 2: stats.StatsSourceService.ProvideStatistics:input_type -> stats.MStatisticsRequest
	2, // 3: stats.StatsServerService.RuntimeStatistics:input_type -> stats.MClusterStatisticsRequest
	1, // 4: stats.StatsSourceService.ProvideStatistics:output_type -> stats.MStatisticsResponse
	3, // 5: stats.StatsServerService.RuntimeStatistics:output_type -> stats.MClusterStatisticsResponse
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_s_stats_proto_init() }
func file_s_stats_proto_init() {
	if File_s_stats_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_s_stats_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MStatisticsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s_stats_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MStatisticsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s_stats_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MClusterStatisticsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s_stats_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MClusterStatisticsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_s_stats_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_s_stats_proto_goTypes,
		DependencyIndexes: file_s_stats_proto_depIdxs,
		MessageInfos:      file_s_stats_proto_msgTypes,
	}.Build()
	File_s_stats_proto = out.File
	file_s_stats_proto_rawDesc = nil
	file_s_stats_proto_goTypes = nil
	file_s_stats_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// StatsSourceServiceClient is the client API for StatsSourceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StatsSourceServiceClient interface {
	ProvideStatistics(ctx context.Context, in *MStatisticsRequest, opts ...grpc.CallOption) (*MStatisticsResponse, error)
}

type statsSourceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStatsSourceServiceClient(cc grpc.ClientConnInterface) StatsSourceServiceClient {
	return &statsSourceServiceClient{cc}
}

func (c *statsSourceServiceClient) ProvideStatistics(ctx context.Context, in *MStatisticsRequest, opts ...grpc.CallOption) (*MStatisticsResponse, error) {
	out := new(MStatisticsResponse)
	err := c.cc.Invoke(ctx, "/stats.StatsSourceService/ProvideStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatsSourceServiceServer is the server API for StatsSourceService service.
type StatsSourceServiceServer interface {
	ProvideStatistics(context.Context, *MStatisticsRequest) (*MStatisticsResponse, error)
}

// UnimplementedStatsSourceServiceServer can be embedded to have forward compatible implementations.
type UnimplementedStatsSourceServiceServer struct {
}

func (*UnimplementedStatsSourceServiceServer) ProvideStatistics(context.Context, *MStatisticsRequest) (*MStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProvideStatistics not implemented")
}

func RegisterStatsSourceServiceServer(s *grpc.Server, srv StatsSourceServiceServer) {
	s.RegisterService(&_StatsSourceService_serviceDesc, srv)
}

func _StatsSourceService_ProvideStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsSourceServiceServer).ProvideStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stats.StatsSourceService/ProvideStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsSourceServiceServer).ProvideStatistics(ctx, req.(*MStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StatsSourceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stats.StatsSourceService",
	HandlerType: (*StatsSourceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProvideStatistics",
			Handler:    _StatsSourceService_ProvideStatistics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "s_stats.proto",
}

// StatsServerServiceClient is the client API for StatsServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StatsServerServiceClient interface {
	RuntimeStatistics(ctx context.Context, in *MClusterStatisticsRequest, opts ...grpc.CallOption) (*MClusterStatisticsResponse, error)
}

type statsServerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStatsServerServiceClient(cc grpc.ClientConnInterface) StatsServerServiceClient {
	return &statsServerServiceClient{cc}
}

func (c *statsServerServiceClient) RuntimeStatistics(ctx context.Context, in *MClusterStatisticsRequest, opts ...grpc.CallOption) (*MClusterStatisticsResponse, error) {
	out := new(MClusterStatisticsResponse)
	err := c.cc.Invoke(ctx, "/stats.StatsServerService/RuntimeStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatsServerServiceServer is the server API for StatsServerService service.
type StatsServerServiceServer interface {
	RuntimeStatistics(context.Context, *MClusterStatisticsRequest) (*MClusterStatisticsResponse, error)
}

// UnimplementedStatsServerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedStatsServerServiceServer struct {
}

func (*UnimplementedStatsServerServiceServer) RuntimeStatistics(context.Context, *MClusterStatisticsRequest) (*MClusterStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RuntimeStatistics not implemented")
}

func RegisterStatsServerServiceServer(s *grpc.Server, srv StatsServerServiceServer) {
	s.RegisterService(&_StatsServerService_serviceDesc, srv)
}

func _StatsServerService_RuntimeStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MClusterStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsServerServiceServer).RuntimeStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stats.StatsServerService/RuntimeStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsServerServiceServer).RuntimeStatistics(ctx, req.(*MClusterStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StatsServerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stats.StatsServerService",
	HandlerType: (*StatsServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RuntimeStatistics",
			Handler:    _StatsServerService_RuntimeStatistics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "s_stats.proto",
}
