package types

import (
	"github.com/go-sif/sif"
	pb "github.com/go-sif/sif/internal/rpc"
)

// An InternalBuildablePartition is a sif-internal version of a BuildablePartition
type InternalBuildablePartition interface {
	CanInsertRowData(row []byte) error                                                                                                             // CanInsertRowData checks if a Row can be inserted into this Partition
	AppendKeyedRowData(row []byte, meta []byte, varData map[string]interface{}, serializedVarRowData map[string][]byte, key uint64) error          // appendKeyedRowData appends a keyed Row to the end of this Partition
	InsertKeyedRowData(row []byte, meta []byte, varData map[string]interface{}, serializedVarRowData map[string][]byte, key uint64, pos int) error // insertKeyedRowData inserts a keyed Row into this Partition
}

// A CloneablePartition is cloneable. Used in the implementation of Partition shuffling
type CloneablePartition interface {
	GetRowMeta(rowNum int) []byte                         // GetRowMeta retrieves specific row metadata from this Partition
	GetRowMetaRange(start int, end int) []byte            // GetRowMetaRange retrieves an arbitrary range of bytes from the row meta
	GetRowData(rowNum int) []byte                         // GetRowData retrieves a specific row from this Partition
	GetRowDataRange(start int, end int) []byte            // GetRowDataRange retrieves an arbitrary range of bytes from the row data
	GetVarRowData(rowNum int) map[string]interface{}      // GetVarRowData retrieves the variable-length data for a given row from this Partition
	GetSerializedVarRowData(rowNum int) map[string][]byte // GetSerializedVarRowData retrieves the serialized variable-length data for a given row from this Partition
	GetSchema() sif.Schema                                // GetSchema retrieves the Schema from the most recent task that manipulated this Partition
	GetIsKeyed() bool                                     // GetIsKeyed returns true iff this Partition has been keyed with KeyRows
	GetKey(rowNum int) (uint64, error)                    // GetKey returns the shuffle key for a row, as generated by KeyRows
	GetKeyRange(rowNum int, numRows int) []uint64         // GetKeyRange returns a range of shuffle keys for a row, as generated by KeyRows, starting at rowNum
}

// A ReduceablePartition can be stored in a pTree. Used in the implementation of Partition reduction
type ReduceablePartition interface {
	CloneablePartition
	sif.BuildablePartition
	sif.KeyablePartition
	PopulateTempRow(tempRow sif.Row, idx int)
	FindFirstKey(key uint64) (int, error)                                              // PRECONDITION: Partition must already be sorted by key
	FindLastKey(key uint64) (int, error)                                               // PRECONDITION: Partition must already be sorted by key
	FindFirstRowKey(keyBuf []byte, key uint64, keyfn sif.KeyingOperation) (int, error) // PRECONDITION: Partition must already be sorted by key
	FindLastRowKey(keyBuf []byte, key uint64, keyfn sif.KeyingOperation) (int, error)  // PRECONDITION: Partition must already be sorted by key
	AverageKeyValue() (uint64, error)                                                  // AverageKeyValue is the average value of key within this sorted, keyed Partition
	Split(pos int) (ReduceablePartition, ReduceablePartition, error)                   // Split splits a Partition into two Partitions. Split position ends up in right Partition.
	BalancedSplit() (uint64, ReduceablePartition, ReduceablePartition, error)          // Split position ends up in right Partition.
	ToBytes() ([]byte, error)                                                          // ToBytes serializes a Partition to a byte array suitable for persistence to disk
}

// An TransferrablePartition can be transferred and cloned. Used in the implementation of Partition shuffling
type TransferrablePartition interface {
	CloneablePartition
	sif.BuildablePartition
	ToMetaMessage() *pb.MPartitionMeta                                                                                   // ToMetaMessage serializes metadata about this Partition to a protobuf message
	ReceiveStreamedData(stream pb.PartitionsService_TransferPartitionDataClient, partitionMeta *pb.MPartitionMeta) error // ReceiveStreamedData loads data from a protobuf stream into this Partition
}
